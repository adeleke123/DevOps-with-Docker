EXERCISE 1.1: GETTING STARTED
---------------------------------

# Start 3 detached Containers:

docker run -d --name container1 ngnix
docker run -d --name container2 nginx
docker run -d --name container3 nginx

# Stop Two Containers:

docker stop container1
docker stop container2

# List all containers:

docker ps -a

# output

CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS                      PORTS     NAMES
90f0286f4527   nginx     "/docker-entrypoint.…"   5 minutes ago   Up 5 minutes                80/tcp    container3
0315ad245c34   nginx     "/docker-entrypoint.…"   5 minutes ago   Exited (0) 13 seconds ago             container2
0fb7eaf58d7c   nginx     "/docker-entrypoint.…"   8 minutes ago   Exited (0) 16 seconds ago             container1

EXERCISE 1.2: CLEANUP
------------------------------
# Verify existing containers and images
docker ps -a
docker image ls

# Remove all containers
docker rm -f container1 container2 container3

# Remove all images
docker image rm e784f4560448 -f

# Verify containers cleanup
docker ps -a

# output
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES

# Verify image cleanup
docker image ls

# output
REPOSITORY   TAG       IMAGE ID   CREATED   SIZE


EXERCISE 1.3: SECRET MESSAGE
-------------------------------------
# Pull the Image:
docker pull devopsdockeruh/simple-web-service:ubuntu

# Run the Container: Start a container from this image in detached mode, so it runs in the background.
docker run -d --name web-service devopsdockeruh/simple-web-service:ubuntu

# Access the Running Container: Use docker exec to get inside the running container. 
# This command allows you to run commands inside an existing container.
docker exec -it web-service /bin/bash

# Follow the Logs: Once inside the container, use the tail command to follow the logs and see the secret message. 
# The -f option will continuously output new lines added to the file.
tail -f ./text.log

# Expected Output:
root@c6188c1f6de8:/usr/src/app# tail -f ./text.log
2024-05-21 12:18:05 +0000 UTC
Secret message is: 'You can find the source code here: https://github.com/docker-hy'
2024-05-21 12:18:07 +0000 UTC
2024-05-21 12:18:09 +0000 UTC
2024-05-21 12:18:11 +0000 UTC
2024-05-21 12:18:13 +0000 UTC
2024-05-21 12:18:15 +0000 UTC

EXERCISE 1.4: MISSING DEPENDENCIES
-----------------------------------

# Start the container:
docker run -it ubuntu sh -c "while true; do echo 'Input website:'; read website; echo 'Searching..'; sleep 1; curl http://\$website; done"

# Find the container ID:
docker ps

# Access the running container: in another terminal
docker exec -it <container_id> /bin/bash

# Install curl inside the container:
apt-get update
apt-get install -y curl

# Return to the original terminal and test the application by entering helsinki.fi when prompted:

Input website:
helsinki.fi
Searching..


EXERCISE 1.5: SIZES OF IMAGES
---------------------------------

# Step 1: Pull Both Images
# First, pull the Ubuntu-based and Alpine-based images of devopsdockeruh/simple-web-service.

docker pull devopsdockeruh/simple-web-service:ubuntu
docker pull devopsdockeruh/simple-web-service:alpine

# Step 2: Compare the Image Sizes
# List all Docker images to compare their sizes:

docker image ls

# output
REPOSITORY                          TAG       IMAGE ID       CREATED       SIZE
ubuntu                              latest    bf3dc08bfed0   3 weeks ago   76.2MB
ubuntu                              22.04     52882761a72a   3 weeks ago   77.9MB
devopsdockeruh/simple-web-service   ubuntu    4e3362e907d5   3 years ago   83MB
devopsdockeruh/simple-web-service   alpine    fd312adc88e0   3 years ago   15.7MB

# Step 3: Verify Functionality in the Alpine Container
# Start the Alpine-based container:
docker run -d --name alpine-web-service devopsdockeruh/simple-web-service:alpine

# Access the running container:
docker exec -it alpine-web-service sh

# Verify the secret message functionality:

/usr/src/app # tail -f /usr/src/app/text.log
2024-05-21 15:41:27 +0000 UTC
2024-05-21 15:41:29 +0000 UTC
2024-05-21 15:41:31 +0000 UTC
2024-05-21 15:41:33 +0000 UTC
Secret message is: 'You can find the source code here: https://github.com/docker-hy'
2024-05-21 15:41:35 +0000 UTC
2024-05-21 15:41:37 +0000 UTC
2024-05-21 15:41:39 +0000 UTC
2024-05-21 15:41:41 +0000 UTC
2024-05-21 15:41:43 +0000 UTC
Secret message is: 'You can find the source code here: https://github.com/docker-hy'

EXERCISE 1.6: HELLO DOCKER HUB
-----------------------------------
# Pull the Image
docker pull devopsdockeruh/pull_exercise:latest

# Run the Container
docker run -it devopsdockeruh/pull_exercise:latest

# Run the container in an interactive shell:

docker run -it --entrypoint sh devopsdockeruh/pull_exercise:latest
/usr/app #
/usr/app # ls
Dockerfile  README.md   index.js
/usr/app # cat README.md
This is the readme, use input "basics" to complete this exercise.
/usr/app # 

# OR Check Docker Hub
# Navigate to Docker Hub and search for devopsdockeruh/pull_exercise. 
# The page should have a description or documentation that provides hints or the password.

docker run -it devopsdockeruh/pull_exercise:latest
Give me the password: basics
You found the correct password. Secret message is:
"This is the secret message"

EXERCISE 1.7: IMAGE FOR SCRIPT
--------------------------------
# Dockerfile:
# Use the official Ubuntu 22.04 as the base image
FROM ubuntu:22.04

# Install curl
RUN apt-get update && apt-get install -y curl

# Copy the script into the Docker image
COPY script.sh /usr/local/bin/script.sh

# Give execution permissions to the script
RUN chmod a+x /usr/local/bin/script.sh

# Set the script as the entrypoint
CMD ["/usr/local/bin/script.sh"]

# script.sh:
#!/bin/sh

while true
do
  echo "Input website:"
  read website
  echo "Searching.."
  sleep 1
  curl http://$website

# Build the Docker Image
# Use the docker build command to create a Docker image from your Dockerfile.
docker build -t curler .

# Run the Docker Container
# Use the docker run command to start a container from the built image.
docker run -it curler

# Test the Functionality
# When the container starts, it should prompt you to input a website URL. 
# Enter a website URL to verify if the script works correctly. For example:

adeleke@machine:~/DevOps/DevOps-with-Docker$ sudo docker run -it curler
Input website:
helsinki.fi
Searching..
<html>
<head><title>301 Moved Permanently</title></head>
<body>
<center><h1>301 Moved Permanently</h1></center>
<hr><center>nginx/1.22.1</center>
</body>
</html>
Input website:

EXERCISE 1.8: TWO LINE DOCKERFILE
-----------------------------------
# Create the Dockerfile:
FROM devopsdockeruh/simple-web-service:alpine
CMD ["server"]

# This Dockerfile uses the base image devopsdockeruh/simple-web-service:alpine and sets the default argument for the entrypoint to server

# Build the Docker Image:
# Use the docker build command to create a new image tagged as web-server.

docker build -t web-server .
# This command tells Docker to build an image using the Dockerfile in the current directory (.) and tag it as web-server.
adeleke@machine:~/start$ sudo docker build -t web-server . 
DEPRECATED: The legacy builder is deprecated and will be removed in a future release.
            Install the buildx component to build images with BuildKit:
            https://docs.docker.com/go/buildx/

Sending build context to Docker daemon  2.048kB
Step 1/2 : FROM devopsdockeruh/simple-web-service:alpine
 ---> fd312adc88e0
Step 2/2 : CMD ["server"]
 ---> Running in ef7e9af41538
Removing intermediate container ef7e9af41538
 ---> 156c580c03fc
Successfully built 156c580c03fc
Successfully tagged web-server:latest

# Run the Docker Container:
# Use the docker run command to start a container from the web-server image.
docker run web-server

adeleke@machine:~/start$ sudo docker run web-server
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /*path                    --> server.Start.func1 (3 handlers)
[GIN-debug] Listening and serving HTTP on :8080

EXERCISE 1.9: VOLUMES
------------------------
# Create the directory
mkdir -p ~/logs

# Run the Docker container with a bind mount
# Command to Submit

docker run -d -v ~/logs/text.log:/usr/src/app/text.log devopsdockeruh/simple-web-service

EXERCISE 1.10: PORTS OPEN
---------------------------
# Run the Docker Container with Port Mapping
docker run -d -p 8080:8080 devopsdockeruh/simple-web-service server
-d: Runs the container in detached mode (in the background).
-p 8080:8080: Maps port 8080 on your host machine to port 8080 in the container.
devopsdockeruh/simple-web-service server: Specifies the image and the argument to start the web service.

# Check if the Container is Running

docker ps
adeleke@machine:~$ sudo docker ps
CONTAINER ID   IMAGE                               COMMAND                  CREATED          STATUS          PORTS                                       NAMES
2e917b83efc6   devopsdockeruh/simple-web-service   "/usr/src/app/server…"   5 seconds ago    Up 3 seconds    0.0.0.0:8080->8080/tcp, :::8080->8080/tcp   youthful_nightingale

# Access the Web Service in the Browser
`json`

{ "message": "You connected to the following path: ..." }

# Command to Submit

docker run -d -p 8080:8080 devopsdockeruh/simple-web-service server

This command starts the devopsdockeruh/simple-web-service container, 
runs the web service on port 8080 and 
maps that port to port 8080 on your host machine so that you can access it via your browser.


EXERCISE 1.11: SPRING
----------------------

# Step-by-Step Guide
Base Image: We'll use the Amazon Corretto 8 image, as the project requires Java 8.
Working Directory: Set up a working directory within the container.
Copy Files: Copy the Maven wrapper, Maven configuration, and project source code into the container.
Install Maven Dependencies and Build the Project: Use Maven to build the project.
Expose Port: Expose port 8080, as the application runs on this port.
Run the Application: Use the java -jar command to run the built JAR file.

# Dockerfile

# Use Amazon Corretto 8 as the base image
FROM amazoncorretto:8

# Set the working directory
WORKDIR /app

# Copy the Maven wrapper and Maven configuration files
COPY .mvn/ .mvn
COPY mvnw pom.xml ./

# Install Maven dependencies
RUN ./mvnw dependency:go-offline

# Copy the project source code
COPY src ./src

# Build the project
RUN ./mvnw package

# Expose port 8080
EXPOSE 8080

# Run the application
CMD ["java", "-jar", "./target/docker-example-1.1.3.jar"]

# Build the Docker Image:
docker build -t spring-project .
# Run the Docker Container:
docker run -p 8080:8080 spring-project

# Explanation
FROM amazoncorretto:8: Specifies the base image with Java 8.
WORKDIR /app: Sets the working directory inside the container to /app.
COPY .mvn/ .mvn and COPY mvnw pom.xml ./: Copies the Maven wrapper and configuration files needed to build the project.
RUN ./mvnw dependency:go-offline: Pre-downloads dependencies to reduce build time.
COPY src ./src: Copies the project source code into the container.
RUN ./mvnw package: Builds the project using Maven.
EXPOSE 8080: Exposes port 8080 on the container.
CMD ["java", "-jar", "./target/docker-example-1.1.3.jar"]: Runs the built JAR file.

# on the browser

http://localhost:8080.

 .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v2.1.3.RELEASE)

2024-05-24 12:23:56.306  INFO 1 --- [           main] c.d.dockerexample.DemoApplication        : Starting DemoApplication v1.1.3 on bc75ffb842c6 with PID 1 (/app/target/docker-example-1.1.3.jar started by root in /app)
2024-05-24 12:23:56.350  INFO 1 --- [           main] c.d.dockerexample.DemoApplication        : No active profile set, falling back to default profiles: default
2024-05-24 12:23:59.635  INFO 1 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2024-05-24 12:23:59.727  INFO 1 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2024-05-24 12:23:59.728  INFO 1 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.16]
2024-05-24 12:23:59.761  INFO 1 --- [           main] o.a.catalina.core.AprLifecycleListener   : The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib]
2024-05-24 12:23:59.969  INFO 1 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2024-05-24 12:23:59.969  INFO 1 --- [           main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3450 ms
2024-05-24 12:24:00.322  INFO 1 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2024-05-24 12:24:00.685  INFO 1 --- [           main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2024-05-24 12:24:00.970  INFO 1 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2024-05-24 12:24:00.974  INFO 1 --- [           main] c.d.dockerexample.DemoApplication        : Started DemoApplication in 6.279 seconds (JVM running for 8.46)
2024-05-24 12:32:23.055  INFO 1 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-05-24 12:32:23.055  INFO 1 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2024-05-24 12:32:23.083  INFO 1 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 28 ms

