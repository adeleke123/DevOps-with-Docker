# Clone the Repository:
git clone https://github.com/docker-hy/material-applications.git

# Navigate to the Directory:
cd material-applications/example-backend

# Create a Dockerfile:
--------------------------------------------------
# Use the official Golang image to build the app
FROM golang:1.16 AS build

# Set the working directory inside the container
WORKDIR /app

# Copy the go.mod and go.sum files
COPY go.mod go.sum ./

# Download the dependencies
RUN go mod download

# Copy the source code into the container
COPY . .

# Build the application
RUN go build -o server

# Use a minimal base image to run the application
FROM debian:bullseye-slim

# Set the working directory inside the container
WORKDIR /app

# Copy the built binary from the build stage
COPY --from=build /app/server .

# Expose the port on which the app will run
EXPOSE 8080

# Define environment variable for PORT
ENV PORT=8080

# Command to run the application
CMD ["./server"]
-------------------------------------------------
# Build the Docker Image:
docker build --platform linux/amd64 -t example-backend .


# Run the Docker Container:
docker run -p 8080:8080 example-backend

# Verify by navigating to: 

http://localhost:8080/ping in the web browser.

# Result:

pong
------------------------------------------------------
# update Dockerfile

# Use the official golang image to build the app
FROM golang:1.16 AS build

# Set the working directory inside the container
WORKDIR /app

# Copy go mod and sum files
COPY go.mod go.sum ./

# Download all dependencies
RUN go mod download

# Copy the source code into the container
COPY . .

# Build the Go app with static linking
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o server .

# Use a minimal base image to run the app
FROM alpine:latest

# Set environment variables
ENV PORT=8080

# Install ca-certificates
RUN apk --no-cache add ca-certificates

# Copy the binary from the build stage
COPY --from=build /app/server /server

# Expose the port on which the app will run
EXPOSE 8080

# Command to run the application
CMD ["./server"]
---------------------------------------

# Build and run the containers:

sudo docker-compose up --build

# Verify the Setup:

Access the frontend: Open your browser and navigate to http://localhost:5000.

Ensure the frontend communicates with the backend via http://localhost:8080.
Test the Configuration:

# Open your browser's developer console (F12 or cmd+shift+I).
Press the button for 1.14 on the frontend. The button should respond if the configuration is correct.

# Stopping the Containers:

sudo docker-compose down

